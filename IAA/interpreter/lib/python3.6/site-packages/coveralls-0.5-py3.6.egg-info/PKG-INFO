Metadata-Version: 1.1
Name: coveralls
Version: 0.5
Summary: Show coverage stats online via coveralls.io
Home-page: http://github.com/coagulant/coveralls-python
Author: Ilya Baryshev
Author-email: baryshev@gmail.com
License: MIT
Description: Coveralls for python
        ====================
        
        .. image:: https://travis-ci.org/coagulant/coveralls-python.png?branch=master
            :target: https://travis-ci.org/coagulant/coveralls-python
        
        .. image:: https://coveralls.io/repos/coagulant/coveralls-python/badge.png?branch=master
            :target: https://coveralls.io/r/coagulant/coveralls-python
        
        .. image:: https://pypip.in/v/coveralls/badge.png
            :target: https://crate.io/packages/coveralls/
        
        `Coveralls.io`_ is service to publish your coverage stats online with a lot of `nice features`_.
        This package provides seamless integration with ``coverage.py`` in your python projects.
        For ruby projects, there is an `official gem`_.
        Only projects hosted on Github are supported.
        
        Works with python 2.6+, 3.2+ and pypy 1.9.
        
        .. _Coveralls.io: http://coveralls.io
        .. _nice features: https://coveralls.io/features
        .. _official gem: https://coveralls.io/docs/ruby
        
        Usage (Travis CI)
        -----------------
        
        This library will publish your coverage results on coveralls.io for everyone to see (unless you're using pro account).
        This package can possibly work with different CI environments, but it's only tested to work with `Travis CI`_ atm.
        
        1. First, log in via Github and `add your repo`_ on Coveralls website.
        2. Add ``pip install coveralls`` to ``install`` section of ``.travis.yml``
        3. Make sure you run your tests with coverage during the build in ``script`` part. Example::
        
            # --source specifies what packages to cover, you probably want to use that option
            script:
              coverage run --source=yourpackagename setup.py test
        
           Note, that example command will gather coverage for specified package.
           If you wish to customize what's included in your reports, consult `coverage docs`_.
        
        .. _coverage docs: http://nedbatchelder.com/code/coverage/
        
        4. Execute run ``coveralls`` in ``after_success`` section::
        
            after_success:
              coveralls
        
        Full example of .travis.yml::
        
            language: python
            python:
              - 2.7
              - 3.3
            install:
              - pip install -r requirements.txt
              - pip install coveralls
            script:
              coverage run --source=moscowdjango,meetup manage.py test
            after_success:
              coveralls
        
        Usage (another CI)
        ~~~~~~~~~~~~~~~~~~
        
        If you're NOT using Travis, first option is to provide a ``repo_token`` option in ``.coveralls.yml``
        at the root of your repo. This is your own secret token, which is available at the bottom of your repository's page on Coveralls.
        Make sure it stays **secret**, do not put it in your public repo.
        
        Example of .coveralls.yml::
        
            # .coveralls.yml
            repo_token: TjkDuVpGjuQcRhNW8dots9c8SSnv7ReM5
        
        Another alternative is to use ``COVERALLS_REPO_TOKEN`` env variable.
        
        .. _add your repo: https://coveralls.io/repos/new
        .. _Travis CI: http://travis-ci.org
        
        Multiple languages (experimental)
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        
        Tracking multi-language repo coverage requires extra setup of merging coverage data for submission.
        If you already have json file from coveralls library from another language (example from `coveralls-lcov`_)::
        
            # coveralls-lcov example
            lcov --compat-libtool --directory . --capture --output-file coverage.info
            coveralls-lcov -v -n coverage.info > coverage.json
        
            # merges python coverage with coveralls-style json file and sends it to api endpoint
            coveralls --merge=coverage.json
        
        If you'd like to just use json data from coveralls (with other tools)::
        
            coveralls --output=coverage.json  # output single json with python coverage in coveralls format
        
        .. _coveralls-lcov: https://github.com/okkez/coveralls-lcov
        
        How it works
        ------------
        It makes custom report for data generated by ``coverage.py`` package and sends it to `json API`_ of coveralls.io service.
        All python files in your coverage analysis are posted to this service along with coverage stats,
        so please make sure you're not ruining your own security! For private projects there is `Coveralls Pro`_.
        
        .. _json API: https://coveralls.io/docs/api_reference
        .. _Coveralls Pro: https://coveralls.io/docs/pro
        
        
        Tips for .coveragerc config
        ---------------------------
        
        This section is a list of most common options for coverage.py, which collects all the data.
        Coveralls feeds from this data, so it's good to know `how to to configure coverage.py`_.
        
        To limit the `report with only your packages`_, specify their names (or directories)::
        
            [run]
            source = pkgname,your_otherpackage
        
        To exclude parts of your source from coverage, for example migrations folders::
        
            [report]
            omit = */migrations/*
        
        Some lines are never executed in your tests, but that can be ok. 
        To mark those lines use inline comments right in your source code::
        
            if debug:   # pragma: no cover
                msg = "blah blah"
                log_message(msg, a)
        
        Sometimes it can be tedious to mark them in code, so you can `specify whole lines to .coveragerc`_::
        
            [report]
            exclude_lines =
                pragma: no cover
                def __repr__
                raise AssertionError
                raise NotImplementedError
                if __name__ == .__main__.:
        
        Finally, if you're using non-default configuration file, specify it to coveralls command::
        
            $ coveralls --rcfile=<file>
        
        .. _how to to configure coverage.py: http://nedbatchelder.com/code/coverage/config.html
        .. _report with only your packages: http://nedbatchelder.com/code/coverage/source.html#source
        .. _specify whole lines to .coveragerc: http://nedbatchelder.com/code/coverage/excluding.html
        
        
        Nosetests
        ~~~~~~~~~
        
        `Nosetests`_ provide a plugin for coverage measurement of your code::
        
            $ nosetests  --with-coverage --cover-package=<your_package_name>
        
        However, it gathers coverage for all executed code, ignoring ``source`` config option in ``.coveragerc``.
        It means, that ``coveralls`` will report unnecessary files, which is inconvenient.
        Here is a workaround, use ``omit`` option in your ``.coveragerc`` to specify a list of filename patterns,
        the files to leave out of reporting (your paths might differ) ::
        
            [report]
            omit =
                */python?.?/*
                */site-packages/nose/*
        
        Note, that native coverage.py and py.test are not affected by this problem and do not require this workaround.
        
        .. _Nosetests: http://nose.readthedocs.org/en/latest/plugins/cover.html
        
        
        Troubleshooting
        ---------------
        
        In case your coverage is not submitted to coveralls.io, despite your best efforts to configure,
        you can use debug::
        
            $ coveralls debug
        
        Debug mode doesn't send anything, just outputs prepared json and reported files list to stdout.
        
        
        Contributing
        ------------
        
        Run tests::
        
            $ python setup.py test
        
        Install latest `unstable version`_::
        
            $ pip install coveralls==dev
        
        .. _unstable version: https://github.com/coagulant/coveralls-python/archive/master.zip#egg=coveralls-dev
        
        
        .. image:: https://d2weczhvl823v0.cloudfront.net/coagulant/coveralls-python/trend.png
           :alt: Bitdeli badge
           :target: https://bitdeli.com/free
        
        
        
        Changelog
        ---------
        
        0.5 (2014-12-10)
        ~~~~~~~~~~~~~~~~
        * Add option --output=<file> for saving json to file for possible merging with coverages from other languages
        * Add merge command for sending coverage stats from multiple languages
        
        0.4.4 (2014-09-28)
        ~~~~~~~~~~~~~~~~~~
        * Proper fix coverage.py dependency version
        
        0.4.3 (2014-09-28)
        ~~~~~~~~~~~~~~~~~~
        * Fix coverage.py dependency version
        
        0.4.2 (2014-05-05)
        ~~~~~~~~~~~~~~~~~~
        * Handle 503 errors from coveralls.io
        
        0.4.1 (2014-01-15)
        ~~~~~~~~~~~~~~~~~~
        * Fix gitlog output with utf8
        
        0.4 (2013-12-27)
        ~~~~~~~~~~~~~~~~
        * Added support for --rcfile=<file> option to cli
        * Improved docs: nosetests and troubleshooting sections added
        * Added debug in case of UnicodeDecodeError
        * Removed sh dependency in favor of Windows compatibility
        
        0.3 (2013-10-02)
        ~~~~~~~~~~~~~~~~
        * Added initial support for Circle CI
        * Fixed Unicode not defined error in python 3
        
        0.2 (2013-05-26)
        ~~~~~~~~~~~~~~~~
        * Python 3.2 and PyPy support
        * Graceful handling of coverage exceptions
        * Fixed UnicodeDecodeError in json encoding
        * Improved readme
        
        0.1.1 (2013-02-13)
        ~~~~~~~~~~~~~~~~~~
        * Introduced COVERALLS_REPO_TOKEN environment variable as a fallback for Travis
        * Removed repo_token from verbose output for security reasons
        
        0.1 (2013-02-12)
        ~~~~~~~~~~~~~~~~
        * Initial release
        
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Topic :: Software Development :: Testing
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3.2
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: Implementation :: PyPy
Classifier: Programming Language :: Python :: Implementation :: CPython
