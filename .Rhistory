training_data,
type = "prob")[, 2],
training_data$income)
class_roc <- performance(pred, "tpr", "fpr")
class_pred <- prediction(predict(pruned_class_tree,
training_data,
type = "prob")[, 2],
training_data$income)
class_roc <- performance(class_pred, "tpr", "fpr")
class_auc <- slot(performance(pred, "auc"), "y.values")[[1]]
class_pred <- prediction(predict(pruned_class_tree,
training_data,
type = "prob")[, 2],
training_data$income)
class_roc <- performance(class_pred, "tpr", "fpr")
class_auc <- slot(performance(class_pred, "auc"), "y.values")[[1]]
# plot the ROC curve and report AUC
plot(class_roc, col = "red", lwd = 3)
abline(0, 1, col = "gray", lty = 2)
title(main = "ROC curve")
text(x = 0.8, y = 0.15, labels = paste("AUC =", class_auc))
library(ipred)
bagging
?bagging
bagged_trees <- bagging(income ~ ., data = training_data, coob = TRUE)
bagged_trees
bagged_trees <- bagging(income ~ ., data = training_data)
bagged_trees
bagged_trees$mtrees
bagged_trees <- bagging(income ~ .,
data = training_data,
control = rpart.control(cp = 0.0001, xval = 0))
bagged_trees
bagged_trees <- bagging(income ~ .,
data = training_data,
control = rpart.control(cp = 0.0001, xval = 0),
coob = TRUE)
bagged_trees
plot(bagged_trees)
# the pruned tree
pruned_class_tree <- prune(class_tree, cp = optimal_cp)
plot(pruned_class_tree, margin = 0.1)
text(pruned_class_tree)
pruned_class_tree
library(caret)
?trainControl
bagged_trees <- train(income ~ ., training_data, method = "treebag", control = cv_control)
cv_control <- trainControl(method = "cv", number = 10)
bagged_trees <- train(income ~ ., training_data, method = "treebag", control = cv_control)
bagged_trees <- train(income ~ ., training_data[, -c(8, 13)], method = "treebag", control = cv_control)
cv_control <- trainControl(method = "cv", number = 10)
bagged_trees <- train(income ~ ., training_data[, -c(8, 13)], method = "treebag", trControl = cv_control)
cv_control <- trainControl(method = "cv", number = 10)
bagged_trees <- train(income ~ ., training_data, method = "treebag", trControl = cv_control)
bagged_trees
bagged_trees$results
bagged_trees$control
bagged_trees$perfNames
bagged_trees$metric
bagged_trees$bestTune
bagged_trees$modelType
bagged_trees$results
plot(bagged_trees)
cv_control <- trainControl(method = "cv", number = 10)
bagged_trees <- train(income ~ ., training_data,
method = "treebag",
trControl = cv_control,
importance = TRUE)
bagged_trees$results
bagged_trees
bagged_trees$coefnames
bagged_trees$bestTune
bagged_trees$metric
bagged_trees$contrasts
bagged_trees$modelInfo
bagged_trees$modelType
bagged_trees$results
bagged_trees$dots
bagged_trees$finalModel
bagged_trees$control
bagged_trees$resample
bagged_trees$levels
bagged_trees$terms
bagged_trees$xlevels
summary(bagged_trees)
caret::varImp(bagged_trees)
?varImp
varImp(bagged_trees)[1:7,]
imp <- varImp(bagged_trees)
View(imp)
imp <- varImp(bagged_trees)
imp$importance
imp$importance
sort(imp$importance)
?sprt
?sort
sort(imp$importance[,1])
order(imp$importance)
imp$importance[order(imp$importance)]
imp$importance[order(imp$importance), ]
imp$importance
imp$importance[order(imp$importance), , drop = FALSE]
imp$importance[order(-imp$importance), , drop = FALSE]
imp$importance[order(-imp$importance), , drop = FALSE][1:7, ]
imp$importance[order(-imp$importance), , drop = FALSE][1:7, , drop = FALSE]
bagged_trees
bagged_trees$pred
predict(bagged_trees, training_data)
cv_control <- trainControl(method = "cv", number = 10)
bagged_trees <- train(income ~ ., training_data,
method = "treebag",
trControl = cv_control,
tuneLength = 10,
importance = TRUE)
bagged_trees
bagged_predictions <- predict(bagged_trees, training_data)
ggplot(bagged_trees)
table(pred = bagged_predictions, true = training_data$income)
bagged_training_accuracy <- (22194 + 6638) / length(bagged_predictions)
bagged_training_accuracy
densityplot(bagged_trees, pch = "|")
plot(imp)
confusionMatrix(training_data$income, bagged_predictions)
bagged_predictions <- predict(bagged_trees, training_data)
confusionMatrix(training_data$income, bagged_predictions)
bagged_pred <- prediction(predict(bagged_tree,
training_data,
type = "prob")[, 2],
training_data$income)
bagged_pred <- prediction(predict(bagged_trees,
training_data,
type = "prob")[, 2],
training_data$income)
bagged_roc <- performance(bagged_pred, "tpr", "fpr")
bagged_auc <- slot(performance(bagged_pred, "auc"), "y.values")[[1]]
# plot the ROC curve and report AUC
plot(bagged_roc, col = "red", lwd = 3)
abline(0, 1, col = "gray", lty = 2)
title(main = "ROC curve")
text(x = 0.8, y = 0.15, labels = paste("AUC =", bagged_auc))
rf_model <- randomForest(income ~ ., training_data)
?randomForest
rf_model <- randomForest(income ~ .,
training_data,
importance = TRUE)
rf_model <- randomForest(income ~ .,
training_data,
importance = TRUE)
```
View(rf_model)
rf_model
plot(rf_model)
plot(rf_model)
plot(rf_model)
rf_model$mtry
rf_model$err.rate
?randomForest
rf_model <- randomForest(income ~ .,
training_data,
importance = TRUE,
ntree = 50)
rf_model <- randomForest(income ~ .,
training_data,
importance = TRUE,
ntree = 50)
rf_model
rf_model <- randomForest(income ~ .,
training_data,
importance = TRUE,
ntree = 100)
plot(rf_model)
rf_model$importance
randomForest::importance(rf_model)
varImpPlot(rf_model)
?tuneRF
tuneRF(training_data[, -1], training_data$income)
tuneRF(training_data[, -1], training_data$income, ntreeTry = 100, doBest=TRUE)
rf_model <- tuneRF(training_data[, -1],
training_data$income,
ntreeTry = 50,
doBest=TRUE)
importance(rf_model)
varImpPlot(rf_model)
rf_model$err.rate
rf_model$confusion
rf_model$confusion
rf_training_accuracy <- (21245 + 4379) / length(rf_model$predicted)
rf_training_accuracy
set.seed(111)
unlink('Desktop/spring-2018/stat_154/hw/HW06_Sidney-Le_cache', recursive = TRUE)
rf_pred <- prediction(predict(rf_model,
training_data,
type = "prob")[, 2],
training_data$income)
rf_roc <- performance(rf_pred, "tpr", "fpr")
rf_auc <- slot(performance(rf_pred, "auc"), "y.values")[[1]]
# plot the ROC curve and report AUC
plot(rf_roc, col = "red", lwd = 3)
abline(0, 1, col = "gray", lty = 2)
title(main = "ROC curve")
text(x = 0.8, y = 0.15, labels = paste("AUC =", rf_auc))
plot(rf_roc, col = "red", lwd = 3)
abline(0, 1, col = "gray", lty = 2)
title(main = "ROC curve")
text(x = 0.8, y = 0.15, labels = paste("AUC =", rf_auc))
# predict
class_test_predictions <- predict(class_tree, testing_data)
# predict
class_test_predictions <- predict(class_tree, testing_data, type = "class")
bagged_test_predictions <- predict(bagged_trees, testing_data, type = "class")
bagged_test_predictions <- predict(bagged_trees, testing_data, type = "raw")
bagged_test_predictions <- predict(bagged_trees, testing_data, type = "raw")
rf_test_predictions <- predict(rf_model, testing_data, type = "class")
# Classification tree
table(pred = class_test_predictions, true = testing_data$income)
# Bagged trees
confusionMatrix(testing_data$income, bagged_test_predictions)
# Random forest
table(pred = rf_test_predictions, true = testing_data$income)
?sensitivity
sensitivity(class_test_predictions, testing_data$income)
class_test_predictions
sensitivity(as.factor(class_test_predictions), testing_data$income)
as.factor(class_test_predictions)
unlist(class_test_predictions)
sensitivity(bagged_test_predictions, testing_data$income)
testing_data$income
testing_data <- read.csv("test_new.csv")[, -1]
testing_data <- read.csv("test_new.csv")
testing_data <- read.csv("test_new.csv")[, -1:2]
testing_data <- read.csv("test_new.csv")[, -c(1:2)]
testing_data$income <- as.factor(testing_data$income)
sensitivity(class_test_predictions, testing_data$income)
479 / (479 + 406)
sensitivity(bagged_test_predictions, testing_data$income)
data.frame(model = models,
sensitivity = sens,
specificity = spec)
models <- c("CART", "Bagged trees", "Random Forest")
sens <- c(696 / (3004 + 696), 479 / (479 + 406), 629 / (629 + 3071))
data.frame(model = models,
sensitivity = sens,
specificity = spec)
spec <- c(11303 / (11303 + 57), 10954 / (10954 + 3221), 11312 / (11312 + 48))
data.frame(model = models,
sensitivity = sens,
specificity = spec)
plot(class_roc, col = "orange", lwd = 3)
plot(bagged_roc, col = "blue", lwd = 3)
plot(rf_roc, col = "red", lwd = 3)
abline(0, 1, col = "gray", lty = 2)
title(main = "ROC curves for all classifiers")
text(x = 0.8, y = 0.15, labels = "uh")
plot(class_roc, col = "orange", lwd = 3)
plot(bagged_roc, col = "blue", lwd = 3, add = T)
plot(rf_roc, col = "red", lwd = 3, add = T)
abline(0, 1, col = "gray", lty = 2)
title(main = "ROC curves for all classifiers")
text(x = 0.8, y = 0.15, labels = "uh")
plot(class_roc, col = "orange", lwd = 3)
plot(bagged_roc, col = "blue", lwd = 3, add = T)
plot(rf_roc, col = "red", lwd = 3, add = T)
abline(0, 1, col = "gray", lty = 2)
title(main = "ROC curves for all classifiers")
legend(0.8, 0.15,
legend = c("CART", "Bagged", "RF"),
col = c("orange", "blue", "red"),
lwd = 2,
cex=0.8)
plot(class_roc, col = "orange", lwd = 3)
plot(bagged_roc, col = "blue", lwd = 3, add = T)
plot(rf_roc, col = "red", lwd = 3, add = T)
abline(0, 1, col = "gray", lty = 2)
title(main = "ROC curves for all classifiers")
legend(0.8, 0.2,
legend = c("CART", "Bagged", "RF"),
col = c("orange", "blue", "red"),
lwd = 2,
cex=0.8)
plot(class_roc, col = "orange", lwd = 3)
plot(bagged_roc, col = "blue", lwd = 3, add = T)
plot(rf_roc, col = "red", lwd = 3, add = T)
abline(0, 1, col = "gray", lty = 2)
title(main = "ROC curves for all classifiers")
legend(0.75, 0.25,
legend = c("CART", "Bagged", "RF"),
col = c("orange", "blue", "red"),
lwd = 2,
cex=0.8)
plot(class_roc, col = "orange", lwd = 3)
plot(bagged_roc, col = "blue", lwd = 3, add = T)
plot(rf_roc, col = "red", lwd = 3, add = T)
abline(0, 1, col = "gray", lty = 2)
title(main = "ROC curves for all classifiers")
legend(0.75, 0.25,
legend = c("CART", "Bagged", "RF"),
col = c("orange", "blue", "red"),
lwd = 3,
cex = 0.8)
plot(class_roc, col = "orange", lwd = 3)
plot(bagged_roc, col = "blue", lwd = 3, add = T)
plot(rf_roc, col = "green", lwd = 3, add = T)
abline(0, 1, col = "gray", lty = 2)
title(main = "ROC curves for all classifiers")
legend(0.75, 0.25,
legend = c("CART", "Bagged", "RF"),
col = c("orange", "blue", "green"),
lwd = 3,
cex = 0.8)
plot(class_roc, col = "orange", lwd = 3)
plot(bagged_roc, col = "blue", lwd = 3, add = T)
plot(rf_roc, col = "forest green", lwd = 3, add = T)
abline(0, 1, col = "gray", lty = 2)
title(main = "ROC curves for all classifiers")
legend(0.75, 0.25,
legend = c("CART", "Bagged", "RF"),
col = c("orange", "blue", "forest green"),
lwd = 3,
cex = 0.8)
plot(class_roc, col = "navy", lwd = 3)
plot(bagged_roc, col = "blue", lwd = 3, add = T)
plot(rf_roc, col = "forest green", lwd = 3, add = T)
abline(0, 1, col = "gray", lty = 2)
title(main = "ROC curves for all classifiers")
legend(0.75, 0.25,
legend = c("CART", "Bagged", "RF"),
col = c("navy", "blue", "forest green"),
lwd = 3,
cex = 0.8)
plot(class_roc, col = "orange", lwd = 3)
plot(bagged_roc, col = "navy", lwd = 3, add = T)
plot(rf_roc, col = "forest green", lwd = 3, add = T)
abline(0, 1, col = "gray", lty = 2)
title(main = "ROC curves for all classifiers")
legend(0.75, 0.25,
legend = c("CART", "Bagged", "RF"),
col = c("orange", "navy", "forest green"),
lwd = 3,
cex = 0.8)
mat <- matrix(c(2, -4, -1, 2))
mat <- matrix(c(2, -4, -1, 2), ncol = 2)
View(mat)
svd(mat)
install.packages('devtools')
install.packages('roxygen')
library(devtools)
devtools::install_github("klutometis/roxygen")
setwd('~')
create('datascienceR')
dat <- read.csv("~/Desktop/downloads/dfcrowd1dh_task.csv")
View(dat)
colnames(dat)
dat[, 389]
dat[, 38995]
dat[, 995]
dat[, 840]
dat[, 88]
library(readr)
dfcrowd1dh_task_run <- read_csv("Desktop/downloads/33_dfcrowd1dh_task_run_csv/dfcrowd1dh_task_run.csv")
View(dfcrowd1dh_task_run)
dat <- dfcrowd1dh_task_run
dfcrowd1dh_task_run <- NULL
View(dat)
#####################################
#Some FUNCTIONS for DATE EXTRACTION
#####################################
#This function takes a formatted date as Y-m-d and returns weekday
day_from_date <- function(adate = NULL) {
if (!is.null(adate)) {
day_list <- c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday",
"Saturday")
dow <- try(which(grepl(weekdays(as.Date(adate, "%m-%d-%y")), day_list)), silent=TRUE)
if(inherits(dow, "try-error")) dow <- NA
return(dow)
}
}
# This function takes some text and returns the position on the weekday list
# So return_days("Monday Tuesday Friday")
# will return 2 (for Monday)
return_days <- function(text) {
if(!is.na(text)){
if(is.character(text)) {
day_list <- c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday",
"Saturday")
res <- as.numeric(which(sapply(day_list, grepl, text, ignore.case = TRUE)))
if (length(res) == 0) {
res <- NA
} else {
res<-res[1] # we can add more handling here to deal with multiple weekday mentions
}
}
} else res <- NA
return(res)
}
# Function takes weekday difference between article_date and text_date and
# calculates approximate date.
day_in_text <- function(article_day, aday, pdate) {
if(!is.na(pdate)){
date_diff <- aday - pdate
if (date_diff > 0) {
out <- as.Date(article_day, "%m-%d-%y") - date_diff
} else {
dd <- ifelse(date_diff != 0, date_diff + 7, 0)
out <- as.Date(article_day, "%m-%d-%y") - dd
}
} else{
out <- try(as.Date(article_day, "%m-%d-%y") - 1, silent=TRUE)
if(inherits(out, "try-error")) out <- NA
}
return(out)
}
##############################################
#NOW, to extract DATES from tua text daynames
##############################################
library(lubridate)
#library(dplyr)
library(readr)
all3clean$article_date<-as.character(all3clean$article_date)
library(readr)
dat <- read_csv("Desktop/downloads/33_dfcrowd1dh_task_run_csv/dfcrowd1dh_task_run.csv")
colnames(dat)
dat[1,]
dat[1, 7]
dat[1, 7][1]
dat[1, 7][[1]]
colnames(dat)
library(readr)
huh <- read_csv("Desktop/downloads/33_dfcrowd1dh_task_run_csv/dfcrowd1dh_task_run_info_only.csv")
View(huh[1,])
huh <- NULL
dat_info <- read_csv("Desktop/downloads/dfcrowd1dh_task.csv")
colnames(dat_info[, 1:100])
dat_info[1, 13]
colnames(dat)
dat$task_id
dat_info <- NULL
library(dplyr)
metadata_dat <- read_csv(paste0(dir, "dfcrowd1dh_task.csv"))
paste0(dir, "dfcrowd1dh_task.csv")
# Read in data
dir <- "Desktop/downloads/"
metadata_dat <- read_csv(paste0(dir, "dfcrowd1dh_task.csv"))
### Group task runs by task ID and choose one
dat %>%
group_by(task_id) %>%
slice(1)
### Group task runs by task ID and choose one
training_dat <- dat %>%
group_by(task_id) %>%
slice(1)
### Group task runs by task ID and choose one, merge in publication date
training_dat <- dat %>%
group_by(task_id) %>%
slice(1) %>%
select(c("task_id", "info_article_text", "info_article_id"))
View(training_dat)
library(readr)
library(dplyr)
# set your work directory
dir <- "~/df-canonicalization"
# Read in data
dat <- read_csv(paste0(dir, "../data/dfcrowd1dh_task_run.csv"))
metadata_dat <- read_csv(paste0(dir, "../data/dfcrowd1dh_task.csv"))
# set your work directory
dir <- "~/df-canonicalization"
setwd(dir)
# Read in data
dat <- read_csv("../data/dfcrowd1dh_task_run.csv")
# Read in data
dat <- read_csv("/data/dfcrowd1dh_task_run.csv")
metadata_dat <- read_csv("/data/dfcrowd1dh_task.csv")
# Read in data
dat <- read_csv("data/dfcrowd1dh_task_run.csv")
# Read in data
dat <- read_csv("data/textthresher/dfcrowd1dh_task_run.csv")
metadata_dat <- read_csv("/data/textthresher/dfcrowd1dh_task.csv")
### Group task runs by task ID and choose one, merge in publication date
training_dat <- dat %>%
group_by(task_id) %>%
slice(1) %>%
select(c("task_id", "info_article_text", "info_article_id"))
metadata_dat <- read_csv("data/textthresher/dfcrowd1dh_task.csv")
### Group task runs by task ID and choose one, merge in publication date
training_dat <- dat %>%
group_by(task_id) %>%
slice(1) %>%
select(c("task_id", "info_article_text", "info_article_id"))
colnames(metadata_dat)
metadata_dat$id[1:5]
### Group task runs by task ID and choose one, merge in publication date and location
training_dat <- dat %>%
group_by(task_id) %>%
slice(1) %>%
inner_join(metadata_dat, by = c("task_id" = "id")) %>%
select(c("task_id",
"info_article_text",
"info_article_metadata_city",
"info_article_metadata_date_published"))
### Group task runs by task ID and choose one, merge in publication date and location
training_dat <- dat %>%
group_by(task_id) %>%
slice(1) %>%
inner_join(metadata_dat, by = c("task_id" = "id")) %>%
select(c("task_id",
"info_article_text.x",
"info_article_metadata_city",
"info_article_metadata_date_published"))
View(training_dat)
### source functions from Nick's script
source("scripts/Day2date.R")
### source functions from Nick's script
source("scripts/Day2Dates.R")
