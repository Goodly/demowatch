library(iRF)
library(dplyr)
n <- 600
p <- 25
library(iRF)
library(iRF)
library(dplyr)
n <- 600
p <- 25
set.seed(999)
X <- data.frame(matrix(rnorm(n * p), nrow=n))
animals <- c('cat','dog','bear','mongoose','wombat','cat','cat','dog')
colors <- c('red', 'orange', 'yellow', 'fuscha', 'crimson', 'gold', 'gold', 'red', 'red', 'red', 'red')
X <- #data.matrix(
X %>%
mutate(animal = sample(animals, n, replace=T),
color = sample(colors, n, replace=T))
Y <- (X[ ,1] > 0.35 & X[, 2] > 0.35) |
(X[,'animal'] %in% c('dog', 'cat') & X[, 5] > 0.35) |
(X[,'animal'] %in% c('bear') & X[, 'color'] %in% c('gold'))
Y <- as.factor(as.numeric(Y > 0))
train.id <- 1:(n/2)
test.id <- setdiff(1:n, train.id)
sel.prob <- rep(1/ncol(X), ncol(X))
rf <- randomForest(x=X[train.id,], y=Y[train.id],
xtest=X[test.id,], ytest=Y[test.id],
mtry.select.prob=sel.prob,
keep.forest=TRUE, track.nodes=TRUE)
rf
X <- data.frame(matrix(rnorm(n * p), nrow=n),
animal = sample(animals, n),
color = sample(colors, n))
X <- data.frame(matrix(rnorm(n * p), nrow=n),
animal = sample(animals, n, T),
color = sample(colors, n, T))
set.seed(999)
n <- 600
p <- 25
animals <- c('cat','dog','bear','mongoose','wombat','cat','cat','dog')
colors <- c('red', 'orange', 'yellow', 'fuscha', 'crimson', 'gold', 'gold', 'red', 'red', 'red', 'red')
set.seed(999)
X <- data.frame(matrix(rnorm(n * p), nrow=n),
animal = sample(animals, n, T),
color = sample(colors, n, T))
X <- data.frame(matrix(rnorm(n * p), nrow=n),
animal = sample(animals, n, T),
color = sample(colors, n, T))
Y <- (X[ ,1] > 0.35 & X[, 2] > 0.35) |
(X[,'animal'] %in% c('dog', 'cat') & X[, 5] > 0.35) |
(X[,'animal'] %in% c('bear') & X[, 'color'] %in% c('gold'))
Y <- as.factor(as.numeric(Y > 0))
train.id <- 1:(n/2)
test.id <- setdiff(1:n, train.id)
sel.prob <- rep(1/ncol(X), ncol(X))
rf <- randomForest(x=X[train.id,], y=Y[train.id],
xtest=X[test.id,], ytest=Y[test.id],
mtry.select.prob=sel.prob,
keep.forest=TRUE, track.nodes=TRUE)
rForest <- readForest(rf, x = X[train.id, ])
rForest
rForest$tree.info
rForest$node.feature
rf$forest
rf$obs.nodes
rForest$tree.info$tree
rForest$tree.info$node.idx
rForest$tree.info$parent
rForest$tree.info$prediction
rf$call
rf$type
rf$importance
rf$mtry
rForest
rForest$node.feature
rForest$tree.info$prediction
rForest$tree.info
ancestorPath
rForest <- readForest(rf, x = X[train.id, ],
return.node.feature = TRUE)
rForest$tree.info
rForest$node.feature
rForest$node.feature
rForest <- readForest(rf, x = X[train.id, ],
get.split = TRUE
)
install_github("karlkumbier/iRF2.0")
install.packages("githubinstall")
library(githubinstall)
gh_install_packages("iRF", ref="hr_local")
uninstall.packages('iRF')
remove.packages('iRF')
library(iRF)
library(devtools)
devtools::install_github("sumbose/iRF")
install.packages('C:\Users\acobw\Downloads\iRF2.0-hr_local', repos = NULL, type="source")
install.packages('C:\\Users\acobw\Downloads\iRF2.0-hr_local', repos = NULL, type="source")
install.packages('C:\\Users\acobw\\Downloads\iRF2.0-hr_local', repos = NULL, type="source")
install.packages('C:\\Users\\acobw\\Downloads\\iRF2.0-hr_local', repos = NULL, type="source")
install.packages('C:\\Users\\acobw\\Downloads\\iRF2.0-hr_local\\iRF2.0-hr_local', repos = NULL, type="source")
install.packages('iRF')
install.packages("iRF")
install.packages('C:\\Users\\acobw\\Downloads\\iRF2.0-hr_local\\iRF2.0-hr_local', repos = NULL, type="source")
### set your work directory
#dir <- "~/df-canonicalization"
dir <- "C:/Users/acobw/Desktop/goodlylabs/df-canonicalization/"
setwd(dir)
### read in data
dat <- read_csv("data/textthresher/dfcrowd1dh_task_run.csv")
library(readr)
library(dplyr)
### set your work directory
#dir <- "~/df-canonicalization"
dir <- "C:/Users/acobw/Desktop/goodlylabs/df-canonicalization/"
setwd(dir)
### read in data
dat <- read_csv("data/textthresher/dfcrowd1dh_task_run.csv")
metadata_dat <- read_csv("data/textthresher/dfcrowd1dh_task.csv")
### group task runs by task ID and choose one, merge in publication date and location
training_dat <- dat %>%
group_by(task_id) %>%
slice(1) %>%
inner_join(metadata_dat, by = c("task_id" = "id")) %>%
select(c("task_id",
"info_article_text.x",
"info_article_metadata_city",
"info_article_metadata_date_published"))
### source functions from Nick's script
source("scripts/Day2Dates.R")
#' @description Based on weekday mentioned in article text as well as publishing date,
#' returns the YYYY-MM-DD date of the event described in the article
#' @param article_data data.frame containing columns 'article_text' and 'date_published'.
#' Values in 'date_published' must be Date objects.
#' @return Original data.frame, with new column 'event_date'.
#' Values are date objects representing the date of the event described in the article
getEventDate <- function(article_data) {
pdate_weekday_number <- weekdayNumber(article_data$date_published)
event_weekday_number <- t(data.frame(lapply(article_data$article_text, return_days)))
date_diff <- pdate_weekday_number - event_weekday_number
numeric_diff <- ifelse(date_diff > 0, date_diff,  # > 0: date_diff; < 0: add 7; == 0: leave as is
ifelse(date_diff < 0, date_diff + 7, 0))  # NOTE: ifelse is used for vectorizaiton
event_dates <- article_data$date_published - numeric_diff
return (cbind(article_data, event_date = event_dates))
}
#' @description Converts date to numbered weekday
#' @param date_object Some date object or sequence of date objects
#' @return Integer representing the date_object's day of the week.
#' ie: 2018-06-23 is a Saturday, so it's weekday number is 7.
weekdayNumber <- function(date_object) {
day_list <- c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday",
"Saturday")
return (match(weekdays(date_object), day_list))
}
names(training_dat)
names(training_dat)[2] <- 'article_text'
names(training_dat)[4] <- 'date_published'
train_with_event <- getEventDate(training_dat)
View(train_with_event)
weekday(as.Date())
weekday(as.Date(2011-11-05))
weekdays(as.Date(2011-11-05))
weekdays(as.Date('2011-11-05'))
assertthat::are_equal(train_with_event[1, 5], as.Date('2011-11-04'))
as.Date('2011-11-04') == as.Date('2011-11-04')
train_with_event[1,5]
train_with_event[1,5][1]
