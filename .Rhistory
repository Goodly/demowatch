### expanding list answers(
onehotter <- function(df) {
# all answers in the dataset by question
unique_answers <- lapply(df, function(lst) {return(unique(unlist(lst)))})
# empty container the size of the fully onehot encoded dataframe
onehotted_ans_mat <- matrix(0, ncol = length(unlist(unique_answers)), nrow = nrow(df))
# produces the names of all the columns
columns <- list()
col_position <- 1
for (question in names(unique_answers)) {
answers <- unique_answers[[question]]
for (i in 1:length(answers)) {
if (answers[i] < 10) {
answer_number <- paste0("0", answers[i])
} else {
answer_number <- answers[i]
}
columns <- append(columns, paste0(question, ".", answer_number))
ans_in_col <- unlist(lapply(df[, c(question)], function(x) {answers[i] %in% x}))
onehotted_ans_mat[, col_position] <- ans_in_col
print(col_position)
col_position <- col_position + 1
}
}
colnames(onehotted_ans_mat) <- columns
return(onehotted_ans_matrix)
}
onehot_answers <- onehotter(all_q_ans_tbl)
return(onehotted_ans_mat)
### expanding list answers(
onehotter <- function(df) {
# all answers in the dataset by question
unique_answers <- lapply(df, function(lst) {return(unique(unlist(lst)))})
# empty container the size of the fully onehot encoded dataframe
onehotted_ans_mat <- matrix(0, ncol = length(unlist(unique_answers)), nrow = nrow(df))
# produces the names of all the columns
columns <- list()
col_position <- 1
for (question in names(unique_answers)) {
answers <- unique_answers[[question]]
for (i in 1:length(answers)) {
if (answers[i] < 10) {
answer_number <- paste0("0", answers[i])
} else {
answer_number <- answers[i]
}
columns <- append(columns, paste0(question, ".", answer_number))
ans_in_col <- unlist(lapply(df[, c(question)], function(x) {answers[i] %in% x}))
onehotted_ans_mat[, col_position] <- ans_in_col
print(col_position)
col_position <- col_position + 1
}
}
colnames(onehotted_ans_mat) <- columns
return(onehotted_ans_mat)
}
onehot_answers <- onehotter(all_q_ans_tbl)
View(onehot_answers)
### expanding list answers(
onehotter <- function(df) {
# all answers in the dataset by question
unique_answers <- lapply(df, function(lst) {return(unique(unlist(lst)))})
# empty container the size of the fully onehot encoded dataframe
onehotted_ans_mat <- matrix(0, ncol = length(unlist(unique_answers)), nrow = nrow(df))
# produces the names of all the columns
columns <- list()
col_position <- 1
for (question in names(unique_answers)) {
answers <- unique_answers[[question]]
for (i in 1:length(answers)) {
if (answers[i] < 10) {
answer_number <- paste0("0", answers[i])
} else {
answer_number <- answers[i]
}
columns <- append(columns, paste0(question, ".", answer_number))
ans_in_col <- unlist(lapply(df[, c(question)], function(x) {answers[i] %in% x}))
onehotted_ans_mat[, col_position] <- ans_in_col
print(col_position)
col_position <- col_position + 1
}
}
colnames(onehotted_ans_mat) <- columns
return(as.data.frame(onehotted_ans_mat))
}
onehot_answers <- onehotter(all_q_ans_tbl)
library(readr)
dat <- read_csv("df-canonicalization/data/textthresher/dfcrowd1dh-2018-06-21T01.csv")
grouped_dat <- dat %>%
group_by(task_pybossa_id,
contributor_id,
topic_number,
question_number,
answer_number) %>%
select(task_pybossa_id,
contributor_id,
topic_number,
question_number,
answer_number) %>%
group_by(task_pybossa_id ,
contributor_id,
topic_number,
question_number) %>%
summarize(answer_list = list(unique(answer_number)))
library(readr)
library(dplyr)
library(reshape2)
grouped_dat <- dat %>%
group_by(task_pybossa_id,
contributor_id,
topic_number,
question_number,
answer_number) %>%
select(task_pybossa_id,
contributor_id,
topic_number,
question_number,
answer_number) %>%
group_by(task_pybossa_id ,
contributor_id,
topic_number,
question_number) %>%
summarize(answer_list = list(unique(answer_number)))
grouped_dat$question_number <- sapply(grouped_dat$question_number,
function(x) {if (x < 10) {
return(paste0(0, x))
} else {
return(as.character(x))}})
grouped_dat <- grouped_dat %>% mutate(question_number = paste(topic_number,
question_number,
sep = "."))
grouped_dat <- grouped_dat[, c(1, 2, 4, 5)]
all_q <- sort(unique(grouped_dat$question_number))
tasks_and_contributors <- grouped_dat %>%
group_by(task_pybossa_id, contributor_id) %>%
summarize() %>%
na.omit()
col_names <- c("task", "contributor", all_q)
all_answers <- matrix(0, ncol = length(all_q) + 2,
nrow = nrow(tasks_and_contributors))
all_answers[, 1:2] <- as.matrix(tasks_and_contributors)
colnames(all_answers) <- col_names
answer_formatter <- function(tbl_row) {
### retrieve task and contributor
task <- tasks_and_contributors[[tbl_row, 1]]
contributor <- tasks_and_contributors[[tbl_row, 2]]
### access the answers
sub_table <- grouped_dat %>%
filter(task_pybossa_id == task & contributor_id == contributor)
sub_answers <- as.data.frame(t(sub_table[, 3:4]))
### transform answers tall to wide
columns <- unlist(sub_answers[1, ])
sub_answers <- as.data.frame(sub_answers[c(FALSE, TRUE), ])
colnames(sub_answers) <- columns
### fill in columns for missing questions
missing_q <- setdiff(all_q, columns)
missing_ans <- as.data.frame(matrix(0, ncol = length(missing_q)))
colnames(missing_ans) <- missing_q
### bind to answered questions and reorder
all_q_ans <- cbind(sub_answers, missing_ans)[, all_q]
return(all_q_ans)
}
all_q_ans_tbl <- answer_formatter(1)
for (i in 2:nrow(tasks_and_contributors)) {
### format the answers
ans_tbl <- answer_formatter(i)
### bind to the first row
all_q_ans_tbl <- rbind(all_q_ans_tbl, ans_tbl)
}
### expanding list answers(
onehotter <- function(df) {
# all answers in the dataset by question
unique_answers <- lapply(df, function(lst) {return(unique(unlist(lst)))})
# empty container the size of the fully onehot encoded dataframe
onehotted_ans_mat <- matrix(0, ncol = length(unlist(unique_answers)), nrow = nrow(df))
# produces the names of all the columns
columns <- list()
col_position <- 1
for (question in names(unique_answers)) {
answers <- unique_answers[[question]]
for (i in 1:length(answers)) {
if (answers[i] < 10) {
answer_number <- paste0("0", answers[i])
} else {
answer_number <- answers[i]
}
columns <- append(columns, paste0(question, ".", answer_number))
ans_in_col <- unlist(lapply(df[, c(question)], function(x) {answers[i] %in% x}))
onehotted_ans_mat[, col_position] <- ans_in_col
print(col_position)
col_position <- col_position + 1
}
}
colnames(onehotted_ans_mat) <- columns
return(as.data.frame(onehotted_ans_mat))
}
onehot_answers <- onehotter(all_q_ans_tbl)
final_answers_w_metadata <- cbind(as.data.frame(tasks_and_contributors), onehot_answers)
IDs <- readRDS(tuas_with_ids.rds)
IDs <- readRDS('data/tuas_with_ids.rds')
getwd()
setwd('~/Desktop/df-canonicalization')
setwd('C:/Users/Sidney/Desktop/df-canonicalization')
IDs <- readRDS('data/tuas_with_ids.rds')
### joining IDs into features
ids_and_features <- final_answers_w_metadata %>% inner_join(id_table, by = c("task_pybossa_id" = "task_id"))
### joining IDs into features
ids_and_features <- final_answers_w_metadata %>% inner_join(IDs, by = c("task_pybossa_id" = "task_id"))
View(ids_and_features)
library(cluster)
?daisy
ids_and_features[, -c("task_pybossa_id", "contributor_id", "ids")]
ids_and_features[, !c("task_pybossa_id", "contributor_id", "ids")]
subset(ids_and_features, select = -c("task_pybossa_id", "contributor_id", "ids"))
select(ids_and_features, -task_pybossa_id)
colnames(ids_and_features)
### joining IDs into features
ids_and_features <- final_answers_w_metadata %>%
inner_join(IDs, by = c("task_pybossa_id" = "task_id")) %>%
select(-c(article_number,
case_number,
event_place,
date_published,
TUA,
article_text,
filename,
event_date))
View(IDs)
### calculate dissimilarity matrix
gower_dist <-
daisy(select(ids_and_features, -c(task_pybossa_id, contributor_id, ids)), metric = c("gower"))
gower_dist <- NULL
### calculate dissimilarity matrix
gower_dist <- ids_and_features %>% filter(ids == 1)
View(gower_dist)
### calculate dissimilarity matrix
gower_dist <- ids_and_features %>%
filter(ids == 1) %>%
select(-c(task_pybossa_id, contributor_id, ids)) %>%
daisy()
### calculate dissimilarity matrix
gower_dist <- ids_and_features %>%
filter(ids == 1) %>%
select(-c(task_pybossa_id, contributor_id, ids)) %>%
daisy(metric = c("gower"))
### calculate dissimilarity matrix
gower_dist <- ids_and_features %>%
filter(ids == 1) %>%
select(-c(task_pybossa_id, contributor_id, ids)) %>%
### calculate dissimilarity matrix
gower_dist <- ids_and_features %>%
filter(ids == 1) %>%
select(-c(task_pybossa_id, contributor_id, ids))
### calculate dissimilarity matrix
gower_dist <- ids_and_features %>%
filter(ids == 1) %>%
select(-c(task_pybossa_id, contributor_id, ids))
View(gower_dist)
daisy(metric = c("gower"))
### calculate dissimilarity matrix
gower_dist <- ids_and_features %>%
filter(ids == 1) %>%
select(-c(task_pybossa_id, contributor_id, ids)) %>%
daisy(metric = c("gower"))
class(gower_dist)
### clustering
aggl_clust <- hclust(gower_dist, method = "complete")
plot(aggl_clust)
library(fpc)
library(fpc)
install.packages('fpc')
library(fpc)
### cluster analysis
clust_stats <- function(dist, tree, k) {
clust_assess <- c("cluster_number",
"n",
"WSS",
"average_within",
"average_between",
"wb_ratio",
"dunn2",
"avg_silwidth")
clust_size <- c("cluster_size")
stats_names <- c()
row_clust <- c()
output_stats <- matrix(ncol = k, nrow = length(clust_assess))
cluster_sizes <- matrix(ncol = k, nrow = k)
for(i in c(1:k)){
row.clust[i] <- paste("Cluster-", i, " size")
}
for(i in c(2:k)){
stats.names[i] <- paste("Test", i-1)
for(j in seq_along(clust_assess)){
output_stats[j, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i))[clust_assess])[j]
}
for(d in 1:k) {
cluster_sizes[d, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i))[clust_size])[d]
dim(cluster_sizes[d, i]) <- c(length(cluster_sizes[i]), 1)
cluster_sizes[d, i]
}
}
output_stats_df <- data.frame(output_stats)
cluster_sizes <- data.frame(cluster_sizes)
cluster_sizes[is.na(cluster_sizes)] <- 0
rows_all <- c(clust_assess, row_clust)
# rownames(output.stats.df) <- clust.assess
output <- rbind(output_stats_df, cluster_sizes)[ ,-1]
colnames(output) <- stats_names[2:k]
rownames(output) <- rows_all
is_num <- sapply(output, is_numeric)
output[is_num] <- lapply(output[is_num], round, 2)
return(output)
}
clust_stats(gower_dist, aggl_clust, 3)
### cluster analysis
clust_stats <- function(dist, tree, k) {
clust_assess <- c("cluster_number",
"n",
"WSS",
"average_within",
"average_between",
"wb_ratio",
"dunn2",
"avg_silwidth")
clust_size <- c("cluster_size")
stats_names <- c()
row_clust <- c()
output_stats <- matrix(ncol = k, nrow = length(clust_assess))
cluster_sizes <- matrix(ncol = k, nrow = k)
for(i in c(1:k)){
row_clust[i] <- paste("Cluster-", i, " size")
}
for(i in c(2:k)){
stats_names[i] <- paste("Test", i-1)
for(j in seq_along(clust_assess)){
output_stats[j, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i))[clust_assess])[j]
}
for(d in 1:k) {
cluster_sizes[d, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i))[clust_size])[d]
dim(cluster_sizes[d, i]) <- c(length(cluster_sizes[i]), 1)
cluster_sizes[d, i]
}
}
output_stats_df <- data.frame(output_stats)
cluster_sizes <- data.frame(cluster_sizes)
cluster_sizes[is.na(cluster_sizes)] <- 0
rows_all <- c(clust_assess, row_clust)
# rownames(output.stats.df) <- clust.assess
output <- rbind(output_stats_df, cluster_sizes)[ ,-1]
colnames(output) <- stats_names[2:k]
rownames(output) <- rows_all
is_num <- sapply(output, is_numeric)
output[is_num] <- lapply(output[is_num], round, 2)
return(output)
}
clust_stats(g'ower_dist, aggl_clust, 3)
clust_stats(gower_dist, aggl_clust, 3)
clust_stats(gower_dist, aggl_clust, 3)
d =1
i = 2
clust_assess <- c("cluster_number",
"n",
"WSS",
"average_within",
"average_between",
"wb_ratio",
"dunn2",
"avg_silwidth")
clust_size <- c("cluster_size")
stats_names <- c()
row_clust <- c()
output_stats <- matrix(ncol = k, nrow = length(clust_assess))
k = 3
output_stats <- matrix(ncol = k, nrow = length(clust_assess))
cluster_sizes <- matrix(ncol = k, nrow = k)
row_clust[i] <- paste("Cluster-", i, " size")
for(i in 1:k){
row_clust[i] <- paste0("Cluster-", i, " size")
}
row_clust <- c()
for(i in 1:k) {
row_clust[i] <- paste0("Cluster-", i, " size")
}
stats_names[i] <- paste0("Test", i-1)
for (i in 2:k) {
stats_names[i] <- paste0("Test", i-1)
for(j in seq_along(clust_assess)) {
output_stats[j, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i))[clust_assess])[j]
}
for(d in 1:k) {
cluster_sizes[d, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i))[clust_size])[d]
dim(cluster_sizes[d, i]) <- c(length(cluster_sizes[i]), 1)
cluster_sizes[d, i]
}
}
for (i in 2:k) {
stats_names[i] <- paste0("Test", i-1)
for(j in seq_along(clust_assess)) {
output_stats[j, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i))[clust_assess])[j]
}
for(d in 1:k) {
cluster_sizes[d, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i))[clust_size])[d]
dim(cluster_sizes[d, i]) <- c(length(cluster_sizes[i]), 1)
}
}
cluster.stats(gower_dist, clustering = cutree(aggl_clust, k = 3))
cluster.stats(gower_dist, clustering = cutree(aggl_clust, k = 3))["cluster_size"]
cluster.stats(gower_dist, clustering = cutree(aggl_clust, k = 3))["cluster.size"]
cluster.stats(gower_dist, clustering = cutree(aggl_clust, k = 3))["cluster.size"][3]
unlist(cluster.stats(gower_dist, clustering = cutree(aggl_clust, k = 3))["cluster.size"])[3]
for (i in 2:k) {
stats_names[i] <- paste0("Test", i-1)
for(j in seq_along(clust_assess)) {
output_stats[j, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i))[clust_assess])[j]
}
for(d in 1:k) {
cluster_sizes[d, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i))[clust_size])[d]
}
}
unlist(cluster.stats(gower_dist, clustering = cutree(aggl_clust, k = 3))["cluster.size"])[[3]]
for (i in 2:k) {
stats_names[i] <- paste0("Test", i-1)
for(j in seq_along(clust_assess)) {
output_stats[j, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i))[clust_assess])[[j]]
}
for(d in 1:k) {
cluster_sizes[d, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i))[clust_size])[[d]]
}
}
### cluster analysis
sil_widths <- lapply(1:3, function(x) {
return(cluster.stats(d = gower_dist, clustering = cutree(aggl_clust, k = x))["avg.silwidth"][[1]])
})
cluster.stats(d = gower_dist, clustering = cutree(aggl_clust, k = x))["avg.silwidth"][[1]]
x = 1
cluster.stats(d = gower_dist, clustering = cutree(aggl_clust, k = x))["avg.silwidth"][[1]]
cluster.stats(d = gower_dist, clustering = cutree(aggl_clust, k = x))
aggl_clust
cluster.stats(d = gower_dist, clustering = cutree(aggl_clust, k = 3))
### cluster analysis
sil_widths <- lapply(2:7, function(x) {
return(cluster.stats(d = gower_dist, clustering = cutree(aggl_clust, k = x))["avg.silwidth"][[1]])
})
x = 2
cluster.stats(d = gower_dist, clustering = cutree(aggl_clust, k = 2))
cluster.stats(d = gower_dist, clustering = cutree(aggl_clust, k = 2))["avg.silwidth"]
cluster.stats(d = gower_dist, clustering = cutree(aggl_clust, k = 2))["avg.silwidth"][[1]]
### cluster analysis
sil_widths <- sapply(2:7, function(x) {
return(cluster.stats(d = gower_dist, clustering = cutree(aggl_clust, k = x))["avg.silwidth"][[1]])
})
### cluster analysis
sil_widths <- sapply(c(2:7), function(x) {
return(cluster.stats(d = gower_dist, clustering = cutree(aggl_clust, k = x))["avg.silwidth"][[1]])
})
### cluster analysis
sil_widths <- apply(c(2:7), function(x) {
return(cluster.stats(d = gower_dist, clustering = cutree(aggl_clust, k = x))["avg.silwidth"][[1]])
})
### cluster analysis
sil_widths <- apply(as.list(2:7), function(x) {
return(cluster.stats(d = gower_dist, clustering = cutree(aggl_clust, k = x))["avg.silwidth"][[1]])
})
### cluster analysis
sil_widths <- lapply(as.list(2:7), function(x) {
return(cluster.stats(d = gower_dist, clustering = cutree(aggl_clust, k = x))["avg.silwidth"][[1]])
})
### cluster analysis
sil_widths <- lapply(as.list(2:7), function(x) {
return(unlist(cluster.stats(d = gower_dist, clustering = cutree(aggl_clust, k = x)))["avg.silwidth"][[1]])
})
for (i in 2:7) {
sil_widths[i] <- cluster.stats(gower_dist, clustering = cutree(aggl_clust, k = i))["avg.silwidth"][[1]]
}
sil_width[i] <- cluster.stats(gower_dist, clustering = cutree(aggl_clust, k = i))["avg.silwidth"][[1]]
### cluster analysis
sil_widths <- c()
for (i in 2:7) {
sil_width[i] <- cluster.stats(gower_dist, clustering = cutree(aggl_clust, k = i))["avg.silwidth"][[1]]
}
sil_widths[i] <- cluster.stats(gower_dist, clustering = cutree(aggl_clust, k = i))["avg.silwidth"][[1]]
### cluster analysis
sil_widths <- c()
for (i in 2:7) {
sil_widths[i] <- cluster.stats(gower_dist, clustering = cutree(aggl_clust, k = i))["avg.silwidth"][[1]]
}
cluster.stats(gower_dist, clustering = cutree(aggl_clust, k = 2))
cluster.stats(gower_dist, clustering = cutree(aggl_clust, k = 3))
cluster.stats(gower_dist, clustering = cutree(aggl_clust, k = 4))
cluster.stats(gower_dist, clustering = cutree(aggl_clust, k = 5))
cluster.stats(gower_dist, clustering = cutree(aggl_clust, k = 6))
cluster.stats(gower_dist, clustering = cutree(aggl_clust, k = 7))
for (i in 2:6) {
sil_widths[i] <- cluster.stats(gower_dist, clustering = cutree(aggl_clust, k = i))["avg.silwidth"][[1]]
}
### cluster analysis
sil_widths <- c()
for (i in 2:6) {
sil_widths[i] <- cluster.stats(gower_dist, clustering = cutree(aggl_clust, k = i))["avg.silwidth"][[1]]
}
cluster.stats(gower_dist, clustering = cutree(aggl_clust, k = 2))
### cluster analysis
sil_widths <- c()
for (i in 2:6) {
sil_widths[i - 1] <- cluster.stats(gower_dist, clustering = cutree(aggl_clust, k = i))["avg.silwidth"][[1]]
}
sil_widths
ggplot(sil_widths) + geom_path(aes(y = sil_widths))
library(ggplot2)
ggplot(sil_widths) + geom_path(aes(y = sil_widths))
ggplot(as.data.frame(sil_widths)) + geom_path(aes(y = sil_widths))
ggplot(as.data.frame(sil_widths)) + geom_path(aes(x = 2:6, y = sil_widths))
